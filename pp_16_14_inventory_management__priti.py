# -*- coding: utf-8 -*-
"""pp_16_14_inventory management _priti.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19QQeKOtXhwAPS9sI1yLCLC535_sTZMqT

##Task-1 : Inventory management system
(ID: PP/16/14, Name: Priti)

##1.Data Setup
Create a CSV file to store inventory details with fields:
○ Item ID, Item Name, Category, Quantity, Unit Price, Reorder
Level.
● Optional: Use a separate CSV file for sales transactions with fields:
○ Transaction ID, Item ID, Quantity Sold, Sale Date, Total Price.
"""

import csv

# Creating the inventory CSV file
inventory_file_path = 'Inventory.csv'
inventory_fields = ['Item ID', 'Item Name', 'Category', 'Quantity', 'Unit Price', 'Reorder Level']

with open(inventory_file_path, mode='w', newline='') as inventory_file:
    writer = csv.writer(inventory_file)
    writer.writerow(inventory_fields)

# Creating the sales transactions CSV file
sales_file_path = 'SalesTransactions.csv'
sales_fields = ['Transaction ID', 'Item ID', 'Quantity Sold', 'Sale Date', 'Total Price']

with open(sales_file_path, mode='w', newline='') as sales_file:
    writer = csv.writer(sales_file)
    writer.writerow(sales_fields)

print(f"Inventory file created: {inventory_file_path}")
print(f"Sales transactions file created: {sales_file_path}")

import csv

# File paths
dataset_file_path = '/content/drive/MyDrive/3_Inventory_Management_System.csv'  # Replace with the path to your dataset file
inventory_file_path = 'Inventory.csv'

# Function to append dataset file to Inventory.csv
def append_dataset_to_inventory(dataset_file, inventory_file):
    with open(dataset_file, mode='r') as dataset_file:
        dataset_reader = csv.DictReader(dataset_file)
        with open(inventory_file, mode='a', newline='') as inventory_file:
            inventory_writer = csv.DictWriter(inventory_file, fieldnames=dataset_reader.fieldnames)
            for row in dataset_reader:
                inventory_writer.writerow(row)
    print("Dataset successfully added to Inventory.csv!")

# Append dataset to Inventory.csv
append_dataset_to_inventory(dataset_file_path, inventory_file_path)

inventory_df = pd.read_csv('Inventory.csv')  # Assuming Inventory.csv is in the same directory

# Display the DataFrame
display(inventory_df)  # Or print(inventory_df) if you're not in a Colab/Jupyter environment

"""##2.Managing Inventory
● Add new items:
○ Input item details like name, category, quantity, and unit price.
● Update inventory:
○ Edit item details (e.g., price or quantity).
● Delete items:
○ Remove items no longer sold or stocked.
"""

import csv

# File path
inventory_file_path = 'Inventory.csv'

# Function to add new items to the inventory
def add_item(item_id, item_name, category, quantity, unit_price, reorder_level):
    with open(inventory_file_path, mode='a', newline='') as inventory_file:
        writer = csv.writer(inventory_file)
        writer.writerow([item_id, item_name, category, quantity, unit_price, reorder_level])
    print(f"Item '{item_name}' added successfully!")

# Function to update item details
def update_item(item_id, field_to_update, new_value):
    updated = False
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = list(csv.reader(inventory_file))
    with open(inventory_file_path, mode='w', newline='') as inventory_file:
        writer = csv.writer(inventory_file)
        for row in reader:
            if row and row[0] == item_id:
                updated = True
                row[reader[0].index(field_to_update)] = new_value
                print(f"Item '{item_id}' updated successfully!")
            writer.writerow(row)
    if not updated:
        print(f"Item with ID '{item_id}' not found!")

# Function to delete an item
def delete_item(item_id):
    found = False
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = list(csv.reader(inventory_file))
    with open(inventory_file_path, mode='w', newline='') as inventory_file:
        writer = csv.writer(inventory_file)
        for row in reader:
            if row and row[0] == item_id:
                found = True
                print(f"Item '{item_id}' deleted successfully!")
                continue  # Skip writing this row to the file
            writer.writerow(row)
    if not found:
        print(f"Item with ID '{item_id}' not found!")

# Example Usage
add_item('003', 'Keyboard', 'Accessories', 30, 50.00, 5)
update_item('002', 'Quantity', 60)
delete_item('003')

"""##3.Tracking Stock Levels
● Monitor inventory:
○ List items running low based on reorder levels.
○ Generate a report of out-of-stock items.
● Alert system:
○ Notify when an item’s stock falls below its reorder level.
"""

import csv

# File path
inventory_file_path = 'Inventory.csv'

# Function to list items running low based on reorder levels
def list_low_stock_items():
    low_stock_items = []
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = csv.DictReader(inventory_file)
        for row in reader:
            if int(row['Quantity']) <= int(row['Reorder Level']):
                low_stock_items.append(row)
    if low_stock_items:
        print("Items running low on stock:")
        for item in low_stock_items:
            print(f"Item ID: {item['Item ID']}, Name: {item['Item Name']}, Stock: {item['Quantity']}, Reorder Level: {item['Reorder Level']}")
    else:
        print("No items are running low on stock.")
    return low_stock_items

# Function to generate a report of out-of-stock items
def generate_out_of_stock_report():
    out_of_stock_items = []
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = csv.DictReader(inventory_file)
        for row in reader:
            if int(row['Quantity']) == 0:
                out_of_stock_items.append(row)
    if out_of_stock_items:
        print("Out-of-stock items:")
        for item in out_of_stock_items:
            print(f"Item ID: {item['Item ID']}, Name: {item['Item Name']}")
    else:
        print("No items are out of stock.")
    return out_of_stock_items

# Function to notify when an item’s stock falls below its reorder level
def alert_low_stock():
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = csv.DictReader(inventory_file)
        for row in reader:
            if int(row['Quantity']) < int(row['Reorder Level']):
                print(f"ALERT: Item '{row['Item Name']}' (ID: {row['Item ID']}) is below its reorder level. Current stock: {row['Quantity']}.")

# Example usage
# Monitor inventory
low_stock = list_low_stock_items()

# Generate out-of-stock report
out_of_stock = generate_out_of_stock_report()

# Alert system for low stock
alert_low_stock()

"""##4.Sales Recording
● Record a sale:
○ Update inventory quantities based on sales.
○ Calculate total sales price for each transaction.
● Generate sales reports:
○ Total sales for a specific period.
○ Top-selling items.
"""

import pandas as pd
from datetime import datetime, timedelta

# Load inventory data
inventory_df = pd.read_csv('Inventory.csv')

# Load or create sales transactions DataFrame
try:
    sales_df = pd.read_csv('SalesTransactions.csv')
except FileNotFoundError:
    sales_df = pd.DataFrame(columns=['Transaction ID', 'Item ID', 'Quantity Sold', 'Sale Date', 'Total Price'])

def record_sale(inventory_df, sales_df, transaction_id, item_id, quantity_sold):
    # Check if item exists in inventory
    if item_id in inventory_df['Item ID'].values:
        # Get current quantity and unit price from inventory
        item_row = inventory_df.loc[inventory_df['Item ID'] == item_id].iloc[0]  # Get the row as a Series
        current_quantity = item_row['Quantity']
        unit_price = item_row['Unit Price']

        # Check if enough stock is available
        if current_quantity >= quantity_sold:
            # Update inventory quantity
            inventory_df.loc[inventory_df['Item ID'] == item_id, 'Quantity'] -= quantity_sold

            # Calculate total price
            total_price = quantity_sold * unit_price

            # Add sale to sales transactions
            new_sale = pd.DataFrame({
                'Transaction ID': [transaction_id],
                'Item ID': [item_id],
                'Quantity Sold': [quantity_sold],
                'Sale Date': [datetime.now().strftime('%Y-%m-%d')],
                'Total Price': [total_price]
            })
            sales_df = pd.concat([sales_df, new_sale], ignore_index=True)

            # Save updated DataFrames to CSV
            inventory_df.to_csv('Inventory.csv', index=False)
            sales_df.to_csv('SalesTransactions.csv', index=False)

            print("Sale recorded successfully!")
            print(f"Total price: ${total_price:.2f}")

            return inventory_df, sales_df  # Return updated DataFrames
        else:
            print("Error: Not enough stock available for this sale.")
    else:
        print("Error: Item ID not found in inventory.")

    return inventory_df, sales_df  # Return original DataFrames if sale not recorded

def generate_sales_reports(sales_df, start_date, end_date):
    # This is a placeholder for your actual report generation logic
    # You would need to add code here to filter sales data based on the dates
    # and then generate the desired reports (e.g., total sales, top-selling items)
    print(f"Generating sales reports for the period: {start_date} to {end_date}")
    # ... (Add your report generation code here) ...

# Example usage:
inventory_df, sales_df = record_sale(inventory_df, sales_df, 'T005', '003', 2)  # Record sale of 2 units of item '003'
generate_sales_reports(sales_df, '2023-11-01', '2023-11-30')  # Generate sales reports for November 2023

# Display updated sales DataFrame
display(sales_df)

"""## 5.Inventory Analysis
● Analyze trends:
○ Identify fast-moving and slow-moving items.
○ Calculate revenue generated by each category.
● Generate summary reports:
○ Total stock value (quantity × unit price).
○ Total revenue and profit for a specified period.

"""

import pandas as pd
import csv

# Load the inventory data
inventory_df = pd.read_csv('Inventory.csv')

def analyze_trends(inventory_df):
    # Fast-moving and Slow-moving Items
    inventory_df['Total Sold'] = inventory_df['Quantity']  # Assuming 'Quantity' represents total sold for now
    sorted_items = inventory_df.sort_values(by=['Total Sold'], ascending=False)
    num_items = len(sorted_items)
    fast_moving_threshold = num_items // 3
    slow_moving_threshold = num_items - (num_items // 3)
    fast_moving_items = sorted_items.head(fast_moving_threshold)
    slow_moving_items = sorted_items.tail(int(num_items / 3))
    print("Fast-moving items:")
    display(fast_moving_items[['Item ID', 'Item Name', 'Total Sold']])
    print("\nSlow-moving items:")
    display(slow_moving_items[['Item ID', 'Item Name', 'Total Sold']])

    # Revenue by Category
    inventory_df['Total Revenue'] = inventory_df['Quantity'] * inventory_df['Unit Price']
    category_revenue = inventory_df.groupby('Category')['Total Revenue'].sum()
    print("\nRevenue generated by each category:")
    display(category_revenue)


def generate_summary_reports(inventory_df):
    # Total Stock Value
    total_stock_value = (inventory_df['Quantity'] * inventory_df['Unit Price']).sum()

    # Total Revenue and Profit (Assuming 20% profit margin)
    total_revenue = inventory_df['Total Revenue'].sum()
    total_profit = total_revenue * 0.20

    print("\nSummary Reports:")
    print(f"Total Stock Value: ${total_stock_value:.2f}")
    print(f"Total Revenue: ${total_revenue:.2f}")
    print(f"Total Profit: ${total_profit:.2f}")


# Example Usage:
analyze_trends(inventory_df)
generate_summary_reports(inventory_df)

"""##6.Advanced Features
● File Handling:
○ Save all updates to inventory and sales records.
○ Export stock reports to a new CSV file.
● Error Handling:
○ Handle invalid inputs, such as negative quantities or duplicate Item IDs.
● Search and Filter:
○ Search items by name, category, or ID.
○ Filter items by stock status (e.g., low stock, out of stock).

"""

import csv

# File paths
inventory_file_path = 'Inventory.csv'
sales_file_path = 'SalesTransactions.csv'
stock_report_file_path = 'StockReport.csv'  # New file for stock reports

# --- File Handling ---

def save_inventory(inventory_data):
    with open(inventory_file_path, mode='w', newline='') as inventory_file:
        writer = csv.writer(inventory_file)
        writer.writerow(['Item ID', 'Item Name', 'Category', 'Quantity', 'Unit Price', 'Reorder Level'])  # Write header
        writer.writerows(inventory_data)  # Write data rows

def save_sales_transactions(sales_data):
    with open(sales_file_path, mode='w', newline='') as sales_file:
        writer = csv.writer(sales_file)
        writer.writerow(['Transaction ID', 'Item ID', 'Quantity Sold', 'Sale Date', 'Total Price'])  # Write header
        writer.writerows(sales_data)  # Write data rows

def export_stock_report(stock_data):
    with open(stock_report_file_path, mode='w', newline='') as report_file:
        writer = csv.writer(report_file)
        writer.writerow(['Item ID', 'Item Name', 'Category', 'Quantity', 'Unit Price', 'Reorder Level'])  # Write header
        writer.writerows(stock_data)  # Write data rows
    print(f"Stock report exported to: {stock_report_file_path}")


# --- Error Handling ---

def validate_input(item_id, item_name, category, quantity, unit_price, reorder_level):
    # Check for duplicate Item IDs
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = csv.DictReader(inventory_file)
        for row in reader:
            if row['Item ID'] == item_id:
                raise ValueError("Error: Duplicate Item ID found.")

    # Check for negative or invalid quantities, unit prices, or reorder levels
    try:
        quantity = int(quantity)
        unit_price = float(unit_price)
        reorder_level = int(reorder_level)
        if quantity < 0 or unit_price < 0 or reorder_level < 0:
            raise ValueError("Error: Invalid input. Quantities, unit prices, and reorder levels must be non-negative.")
    except ValueError as e:
        raise ValueError(f"Error: Invalid input. {e}")

# --- Search and Filter ---

def search_items(search_term, search_by='name'):
    results = []
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = csv.DictReader(inventory_file)
        for row in reader:
            if search_by == 'name' and search_term.lower() in row['Item Name'].lower():
                results.append(row)
            elif search_by == 'category' and search_term.lower() in row['Category'].lower():
                results.append(row)
            elif search_by == 'id' and search_term == row['Item ID']:
                results.append(row)
    return results

def filter_items_by_stock_status(status='low'):
    results = []
    with open(inventory_file_path, mode='r') as inventory_file:
        reader = csv.DictReader(inventory_file)
        for row in reader:
            if status == 'low' and int(row['Quantity']) <= int(row['Reorder Level']):
                results.append(row)
            elif status == 'out_of_stock' and int(row['Quantity']) == 0:
                results.append(row)
    return results

"""##7.User Interface
● Create an interactive, menu-driven program:
○ Manage inventory (add, update, delete).
○ Record sales transactions.
○ View stock and sales analysis.
"""

!pip install ipywidgets pandas
import pandas as pd
import ipywidgets as widgets
from IPython.display import display

# Load your inventory dataset
inventory_df = pd.read_csv('/content/drive/MyDrive/3_Inventory_Management_System.csv')  # Replace with your dataset path

# Create a search bar
search_bar = widgets.Text(
    placeholder='Search by Item Name or Category',
    description='Search:',
    disabled=False
)

# Create an output widget to display the results
output = widgets.Output()

# Define a function to handle search events
def on_search_change(change):
    with output:
        output.clear_output()
        search_term = change['new'].lower()
        filtered_df = inventory_df[
            inventory_df['Item Name'].str.lower().str.contains(search_term) |
            inventory_df['Category'].str.lower().str.contains(search_term)
        ]
        display(filtered_df)

# Observe changes in the search bar
search_bar.observe(on_search_change, names='value')

# Display the UI elements
display(search_bar, output)

# Display the initial inventory data
with output:
    display(inventory_df)

!pip install ipywidgets pandas
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output
import csv
from datetime import datetime

# Load Inventory Data (Replace with your file path)
inventory_file_path = 'Inventory.csv'
try:
    inventory_df = pd.read_csv(inventory_file_path)
except FileNotFoundError:
    inventory_df = pd.DataFrame(columns=['Item ID', 'Item Name', 'Category', 'Quantity', 'Unit Price', 'Reorder Level'])

# Sales Transactions Data (Replace with your file path)
sales_file_path = 'SalesTransactions.csv'
try:
    sales_df = pd.read_csv(sales_file_path)
except FileNotFoundError:
    sales_df = pd.DataFrame(columns=['Transaction ID', 'Item ID', 'Quantity Sold', 'Sale Date', 'Total Price'])


# Function to save data to CSV
def save_data(df, file_path):
    df.to_csv(file_path, index=False)


# --- UI Functions ---

def manage_inventory():
    item_id = widgets.Text(description="Item ID:")
    item_name = widgets.Text(description="Item Name:")
    category = widgets.Text(description="Category:")
    quantity = widgets.IntText(description="Quantity:")
    unit_price = widgets.FloatText(description="Unit Price:")
    reorder_level = widgets.IntText(description="Reorder Level:")

    add_button = widgets.Button(description="Add Item")
    update_button = widgets.Button(description="Update Item")
    delete_button = widgets.Button(description="Delete Item")
    back_button = widgets.Button(description="Back")

    output = widgets.Output()

    def on_add_click(b):
        with output:
            clear_output()
            global inventory_df  # Access the global inventory_df
            new_row = pd.DataFrame({
                'Item ID': [item_id.value],
                'Item Name': [item_name.value],
                'Category': [category.value],
                'Quantity': [quantity.value],
                'Unit Price': [unit_price.value],
                'Reorder Level': [reorder_level.value]
            })
            inventory_df = pd.concat([inventory_df, new_row], ignore_index=True)
            save_data(inventory_df, inventory_file_path)
            print("Item added successfully!")

    def on_update_click(b):
        with output:
            clear_output()
            global inventory_df
            if item_id.value in inventory_df['Item ID'].values:
                inventory_df.loc[inventory_df['Item ID'] == item_id.value, ['Item Name', 'Category', 'Quantity', 'Unit Price', 'Reorder Level']] = [item_name.value, category.value, quantity.value, unit_price.value, reorder_level.value]
                save_data(inventory_df, inventory_file_path)
                print("Item updated successfully!")
            else:
                print("Item not found!")

    def on_delete_click(b):
        with output:
            clear_output()
            global inventory_df
            if item_id.value in inventory_df['Item ID'].values:
                inventory_df = inventory_df[inventory_df['Item ID'] != item_id.value]
                save_data(inventory_df, inventory_file_path)
                print("Item deleted successfully!")
            else:
                print("Item not found!")

    def on_back_click(b):
        with output:
            clear_output()
            display(menu_dropdown, output)

    add_button.on_click(on_add_click)
    update_button.on_click(on_update_click)
    delete_button.on_click(on_delete_click)
    back_button.on_click(on_back_click)

    display(widgets.VBox([item_id, item_name, category, quantity, unit_price, reorder_level, add_button, update_button, delete_button, back_button, output]))


# ... (Similar functions for record_sales_transaction and view_analysis) ...
def record_sales_transaction():
    transaction_id = widgets.Text(description="Transaction ID:")
    item_id = widgets.Text(description="Item ID:")
    quantity_sold = widgets.IntText(description="Quantity Sold:")
    sale_date = widgets.DatePicker(description="Sale Date:", value=datetime.now().date())

    record_button = widgets.Button(description="Record Sale")
    back_button = widgets.Button(description="Back")
    output = widgets.Output()

    def on_record_click(b):
        with output:
            clear_output()
            global sales_df, inventory_df

            # Check if item exists in inventory
            if item_id.value in inventory_df['Item ID'].values:

                # Get current quantity and unit price from inventory
                current_quantity = inventory_df.loc[inventory_df['Item ID'] == item_id.value, 'Quantity'].values[0]
                unit_price = inventory_df.loc[inventory_df['Item ID'] == item_id.value, 'Unit Price'].values[0]

                # Check if enough stock is available
                if current_quantity >= quantity_sold.value:

                    # Update inventory quantity
                    inventory_df.loc[inventory_df['Item ID'] == item_id.value, 'Quantity'] = current_quantity - quantity_sold.value
                    save_data(inventory_df, inventory_file_path)

                    # Calculate total price
                    total_price = quantity_sold.value * unit_price

                    # Add sale to sales transactions
                    new_sale = pd.DataFrame({
                        'Transaction ID': [transaction_id.value],
                        'Item ID': [item_id.value],
                        'Quantity Sold': [quantity_sold.value],
                        'Sale Date': [sale_date.value.strftime('%Y-%m-%d')],  # Format date
                        'Total Price': [total_price]
                    })
                    sales_df = pd.concat([sales_df, new_sale], ignore_index=True)
                    save_data(sales_df, sales_file_path)

                    print("Sale recorded successfully!")
                    print(f"Total price: ${total_price:.2f}")

                else:
                    print("Error: Not enough stock available for this sale.")

            else:
                print("Error: Item ID not found in inventory.")

    def on_back_click(b):
        with output:
            clear_output()
            display(menu_dropdown, output)

    record_button.on_click(on_record_click)
    back_button.on_click(on_back_click)

    display(widgets.VBox([transaction_id, item_id, quantity_sold, sale_date, record_button, back_button, output]))


def view_analysis():
    # --- Stock Analysis ---
    def low_stock_analysis():
        low_stock_items = inventory_df[inventory_df['Quantity'] <= inventory_df['Reorder Level']]
        if not low_stock_items.empty:
            print("Low Stock Items:")
            display(low_stock_items)
        else:
            print("No items are currently low on stock.")

    # --- Sales Analysis (Example: Total sales for a period) ---
    def total_sales_analysis():
        start_date_picker = widgets.DatePicker(description="Start Date:")
        end_date_picker = widgets.DatePicker(description="End Date:")
        calculate_button = widgets.Button(description="Calculate Total Sales")
        output = widgets.Output()

        def on_calculate_click(b):
            with output:
                clear_output()
                start_date = start_date_picker.value
                end_date = end_date_picker.value

                # Filter sales data within the date range
                filtered_sales = sales_df[(sales_df['Sale Date'] >= start_date.strftime('%Y-%m-%d')) & (sales_df['Sale Date'] <= end_date.strftime('%Y-%m-%d'))]

                total_sales = filtered_sales['Total Price'].sum()
                print(f"Total sales from {start_date} to {end_date}: ${total_sales:.2f}")

        calculate_button.on_click(on_calculate_click)
        display(widgets.VBox([start_date_picker, end_date_picker, calculate_button, output]))

    analysis_options = ['Low Stock Analysis', 'Total Sales Analysis', 'Back']
    analysis_dropdown = widgets.Dropdown(options=analysis_options, description="Select Analysis:")
    output = widgets.Output()

    def on_analysis_change(change):
        with output:
            clear_output()
            if change['new'] == 'Low Stock Analysis':
                low_stock_analysis()
            elif change['new'] == 'Total Sales Analysis':
                total_sales_analysis()
            elif change['new'] == 'Back':
                display(menu_dropdown, output)

    analysis_dropdown.observe(on_analysis_change, names='value')
    display(analysis_dropdown, output)


# --- Main Menu ---
menu_options = ['Manage Inventory', 'Record Sales Transaction', 'View Stock and Sales Analysis', 'Exit']
menu_dropdown = widgets.Dropdown(options=menu_options, description="Select Action:")
output = widgets.Output()


def on_menu_change(change):
    with output:
        clear_output()
        if change['new'] == 'Manage Inventory':
            manage_inventory()
        elif change['new'] == 'Record Sales Transaction':
            record_sales_transaction()
        elif change['new'] == 'View Stock and Sales Analysis':
            view_analysis()
        elif change['new'] == 'Exit':
            print("Exiting Inventory Management System.")


menu_dropdown.observe(on_menu_change, names='value')
display(menu_dropdown, output)

inventory_df